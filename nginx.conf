#user  nginx;
worker_processes  1;

events {
    worker_connections  1024;
}

rtmp {

    server {

        listen 1935;

        chunk_size 4000;
        allow play all;

        # TV mode: one publisher, many subscribers
        application mytv {

            # enable live streaming
            live on;

            # record first 1K of stream
            record all;
            record_path /tmp/av;
            record_max_size 128K;

            # append current timestamp to each flv
            record_unique on;

            # publish only from localhost
            allow publish 127.0.0.1;
            deny publish all;

            #allow play all;
        }

	application webcam/$name {
            live on;

            # Stream from local webcam
            exec_static ffmpeg -f video4linux2 -i /dev/video0 -c:v libx264 -an
                               -f flv rtmp://localhost:1935/webcam/$name;
        }

    application video {
        live on;
        exec_push /usr/local/bin/ffmpeg -i rtmp://localhost/video/$name -c:v libx264 -an -strict 2 -crf 18 -g 15 -flags +global_header -f segment -probesize 10000 -strftime 1 -use_localtime 1 -segment_time 00:00:01.000 -segment_format_options movflags=+faststart -segment_list /var/lib/artifacts/video-$name-segment-list -segment_list_flags live -segment_list_type flat -reset_timestamps 1 /var/lib/artifacts/video-$name-%Y%m%d-%s.mp4 2>>/var/log/ffmpeg-video-$name.log;
    }

    application myapp {
        live on;

        exec /var/scripts/exec_wrapper.sh $name;
        exec_kill_signal term;
    }

    application myapp2 {
        live on;
    }

    application hls {
        live on;
        hls on;
        hls_path /tmp/hls;
        hls_fragment 15s;
    }
   }
}


http {
	access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log debug;
    
    sendfile        on;
    keepalive_timeout  65;

	upstream api {
		server api-server:3000;
	}	


    server {
        
		listen       8080;
        server_name  localhost;

		# vod settings
		vod_last_modified 'Sun, 19 Nov 2000 08:52:00 GMT';
		vod_last_modified_types *;

		# gzip manifests
		gzip on;
		gzip_types application/vnd.apple.mpegurl;

		# vod caches
		vod_metadata_cache metadata_cache 512m;
		vod_response_cache response_cache 128m;		
		
		# file handle caching / aio
		open_file_cache          max=1000 inactive=5m;
		open_file_cache_valid    2m;
		open_file_cache_min_uses 1;
		open_file_cache_errors   on;
		aio on;

		location /hls/ {
		    vod hls;
		    vod_mode mapped;
		    vod_upstream_location /kalapi;
		    vod_max_mapping_response_size 10m;
		    #vod_live_window_duration 0;
		    vod_segment_duration 1000;

			vod_hls_interleave_frames on;

			etag off;
			if_modified_since off;
			
			add_header Access-Control-Allow-Headers '*';
			add_header Access-Control-Expose-Headers 'Server,range,Content-Length,Content-Range';
			add_header Access-Control-Allow-Methods 'GET, HEAD, OPTIONS';
			add_header Access-Control-Allow-Origin '*';		    
			add_header Cache-Control no-cache;
			add_header X-Me $hostname;
			expires 100d;
		}

		location /dash/ {		
			vod dash;
			vod_mode mapped;
			vod_upstream_location /kalapi;

			vod_max_mapping_response_size 10m;
			#vod_live_window_duration 0;
			vod_segment_duration 1000;
            
			vod_align_segments_to_key_frames on;
			vod_manifest_duration_policy max;
			vod_dash_manifest_format segmenttemplate;
			vod_dash_profiles urn:mpeg:dash:profile:isoff-live:2011;

			add_header Access-Control-Allow-Headers '*';
			add_header Access-Control-Expose-Headers 'Server,range,Content-Length,Content-Range';
			add_header Access-Control-Allow-Methods 'GET, HEAD, OPTIONS';
			add_header Access-Control-Allow-Origin '*';
			expires 100d;
		}

		
		location ^~ /kalapi/ {
			#internal;
			rewrite ^\/kalapi\/(.*)$  /api/$1 break;
			proxy_pass http://api/;
			proxy_set_header Host $http_host;
		}		
		
    }
}
